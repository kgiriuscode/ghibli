/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/films': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Return all films
     * @description The Films endpoint returns information about all of the Studio Ghibli films.
     *
     */
    get: {
      parameters: {
        query?: {
          /** @description comma-separated list of fields to include in the response */
          fields?: string
          /**
           * Format: int64
           * @description amount of results (default 50) (maximum 250)
           */
          limit?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description An array of films */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/films/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Film ID
     * @description Returns a film based on a single ID
     *
     */
    get: {
      parameters: {
        query?: {
          /** @description comma-separated list of fields to include in the response */
          fields?: string
        }
        header?: never
        path: {
          /** @description film `id` */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description A single film is returned */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/people': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Return all people
     * @description The People endpoint returns information about all of the Studio Ghibli people. This broadly includes all Ghibli characters, human and non-.
     *
     */
    get: {
      parameters: {
        query?: {
          /** @description comma-separated list of fields to include in the response */
          fields?: string
          /**
           * Format: int64
           * @description amount of results (default 50) (maximum 250)
           */
          limit?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description An array of people */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/people/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * People ID
     * @description Returns a person based on a single ID
     *
     */
    get: {
      parameters: {
        query?: {
          /** @description comma-separated list of fields to include in the response */
          fields?: string
        }
        header?: never
        path: {
          /** @description person `id` */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description A single person is returned */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Return all locations
     * @description The Locations endpoint returns information about all of the Studio Ghibli locations. This broadly includes lands, countries, and places.
     *
     */
    get: {
      parameters: {
        query?: {
          /** @description comma-separated list of fields to include in the response */
          fields?: string
          /**
           * Format: int64
           * @description amount of results (default 50) (maximum 250)
           */
          limit?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description An array of locations */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/locations/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Location ID
     * @description Returns an individual location.
     */
    get: {
      parameters: {
        query?: {
          /** @description comma-separated list of fields to include in the response */
          fields?: string
        }
        header?: never
        path: {
          /** @description location `id` */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description A single location is returned */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/species': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Species
     * @description The Species endpoint returns information about all of the Studio Ghibli species. This includes humans, animals, and spirits et al.
     *
     */
    get: {
      parameters: {
        query?: {
          /** @description comma-separated list of fields to include in the response */
          fields?: string
          /**
           * Format: int64
           * @description amount of results (default 50) (maximum 250)
           */
          limit?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description An array of species */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/species/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Species ID
     * @description Returns an individual species
     */
    get: {
      parameters: {
        query?: {
          /** @description comma-separated list of fields to include in the response */
          fields?: string
        }
        header?: never
        path: {
          /** @description film `id` */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description A single species is returned */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/vehicles': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Vehicles
     * @description The Vehicles endpoint returns information about all of the Studio Ghibli vechiles. This includes cars, ships, and planes.
     *
     */
    get: {
      parameters: {
        query?: {
          /** @description comma-separated list of fields to include in the response */
          fields?: string
          /**
           * Format: int64
           * @description amount of results (default 50) (maximum 250)
           */
          limit?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description An array of vehicles */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/vehicles/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Vehicle ID
     * @description An individual vehicle
     */
    get: {
      parameters: {
        query?: {
          /** @description comma-separated list of fields to include in the response */
          fields?: string
        }
        header?: never
        path: {
          /** @description film `id` */
          id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /** @description A single vehicle is returned */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Bad request */
        400: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /** @description Not found */
        404: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: never
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export type operations = Record<string, never>
